"""
1차
풀이 시간 : 21분
시도 횟수 : 1회
실행 시간 :208ms
메모리 : 112436 kb

2차
풀이 시간 : 17분
시도 횟수 : 1회
실행 시간 : 212ms
메모리 : 112408kb



Routine
1. 문제 그냥 정독 ok
2. 문제 주석 복사 ok
4. 테스트케이스 외에 고려해야할 사항 생각해보기 + 설계에 반영
: sort쓰자 ! 어렵지 않군
5. 종이에 손설계 OK
6. 주석으로 구현할 영역 정리 : 간단해서 바로함
7. 구현 : ok
8.테스트케이스 단계별 디버깅 확인 : ok
9. 1시간 지났는데 디버깅 헤매는 중이면 리셋!! 할필요 ㄴㄴ
"""

"""
바닥 먼지의 양을 담은 n * n 행렬
n은 항상 홀수
 처음에 정가운데 격자에는 먼지가 존재하지 않습니다. 
 정가운데부터 시작하여 아래 그림과 같이 나선형으로 왼쪽 - 아래쪽 - 오른쪽 - 위쪽 순서로 이동하며 청소
 
빗자루가 이동한 위치의 격자(Curr)에 있는 먼지가 함께 이동하는데 아래의 비율에 맞춰서 먼지가 이동하게 됩니다. 
이동한 먼지는 기존의 먼지 양에 더해지고, 빗자루가 이동한 위치(Curr)에 있는 먼지는 모두 없어지게 됩니다.
a%에 해당하는 먼지 양은 다른 격자에 이동한 먼지의 양을 모두 합한 것을 이동한 위치에 있던 먼지의 양에서 빼고 남은 먼지
비율을 곱해줄 때 소숫점 아래의 숫자는 버림
"""

"""
lst = [(-1, -1), (-1, 0), (-2, 0), (-1, 1), (1, 1), (1, 0), (2, 0),  (1, -1), (-2, 0)]

percent_lst = [10, 7, 2, 1, 1, 7, 2, 10, 5]

"""


def oob(i, j):
    return i < 0 or j < 0 or i >= N or j >= N


point_lst = [
    [(-1, -1), (-1, 0), (-2, 0), (-1, 1), (1, 1), (1, 0), (2, 0), (1, -1), (0, -2)],
    [(1, -1), (0, -1), (0, -2), (-1, -1), (-1, 1), (0, 1), (0, 2), (1, 1), (2, 0)],
    [(1, 1), (1, 0), (2, 0), (1, -1), (-1, -1), (-1, 0), (-2, 0), (-1, 1), (0, 2)],
    [(-1, 1), (0, 1), (0, 2), (1, 1), (1, -1), (0, -1), (0, -2), (-1, -1), (-2, 0)]
]
percent_lst = [10, 7, 2, 1, 1, 7, 2, 10, 5]



N = int(input())
arr = [list(map(int, input().split())) for _ in range(N)]
DIR = (0, -1), (1, 0), (0, 1), (-1, 0)
r, c = N//2, N//2
d = 0
answer = 0
test = []
l = 1
cnt = 0
while 1:
    for d in range(4):
        di, dj = DIR[d]
        for t in range(l):
            r += di
            c += dj
            tmp = arr[r][c]
            lst = point_lst[d]
            for k in range(9):
                ddi, ddj = lst[k]
                fly = tmp * percent_lst[k] // 100
                arr[r][c] -= fly
                du, dv = r + ddi, c + ddj

                if oob(du, dv):
                    answer += fly
                    continue
                arr[du][dv] += fly

            #a%
            ni, nj = r + di, c + dj
            if oob(ni, nj):
                answer += arr[r][c]
            else:
                arr[ni][nj] += arr[r][c]
            arr[r][c] = 0
            if r == 0 and c == 0:
                break
        cnt += 1
        if cnt ==2:
            l+=1
            cnt = 0
        if r == 0 and c == 0:
            break
    if r == 0 and c == 0:
        break
print(answer)