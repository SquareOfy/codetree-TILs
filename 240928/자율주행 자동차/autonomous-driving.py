"""
Routine
1. 문제 그냥 정독 ok
2. 문제 주석 복사 ok
4. 테스트케이스 외에 고려해야할 사항 생각해보기 + 설계에 반영
    : oob 불필요. 방향 좌회전 우선!! 종료조건 주의
5. 종이에 손설계
6. 주석으로 구현할 영역 정리 :
7. 구현 : ok
8.테스트케이스 단계별 디버깅 확인 :
9. 예외될 상황 테스트케이스 만들어서 확인 :
10. 1시간 지났는데 디버깅 헤매는 중이면 리셋!!


Debugging CheckPoint
- N, M / 행 열 index 오타 실수 점검
- max, min 구할 때 초기값 체크
- 인덱스 디테일 확인( dfs 종료 level이나 범위 경계값)
- 배열 사용 목적 확인 후 배열 변수 실수 확인
- 조건분기문 복사한 경우 모두 바꿨는지 체크
- 디버깅해서 바꾼 코드 부분 혹은 로직이 있다면 그 부분 중심으로 전반적으로 재점검
- 문제 조건 + 코드 로직 같이 따라가며 이상한 로직 없는지 점검
- 로직이 맞는데 답이 이상하다면 아주 사소한 순서 문제는 없을지 점검

Reset Timing
- 1시간 ~ 1시간 반 : 코드 다 짰는데 테케 정답이 엉망진창?
    문제 이해 미흡, 설계 미흡일 확률 높으므로 문제 다시 읽고 리셋할 모듈 찾을지 전체 리셋할지 판단하기
- 1시간 반 쯤에 코드 대부분이 잘 돌아가는데 특정 포인트에서 안되는 것 같다?
    - 특수한 테케가 있는지 1차로 점검해보고 디버깅
    - 오타 찾아야할 것 같다 => 그냥 리셋해버리자

"""

"""
n * m 크기의 도로에 1 * 1 크기의 자율주행 자동차


절차 
1. 현재 방향을 기준으로 왼쪽 방향으로 한 번도 간 적이 없다면 좌회전해서 해당 방향으로 1 칸 전진합니다.
2. 만약 왼쪽 방향이 인도거나 이미 방문한 도로인 경우 좌회전하고 다시 1번 과정을 시도합니다.
3. 2번에 대해 4방향 모두 확인하였으나 전진하지 못한 경우에는
 바라보는 방향을 유지한 채로 한 칸 후진을 하고 다시 1번 과정을 시도합니다.
 
4. 3번 과정을 시도하려 했지만 뒷 공간이 인도여서 후진조차 하지 못한다면 작동을 멈춥니다.

 d(바라보는 방향)는 0부터 3까지 숫자로 주어지고 북동남서
 인덱스 0부터 시작 
 
 0 도로
 1 인도 
 자율주행 자동차가 있는 칸은 도로일 것이라 가정해도 좋습니다.
격자의 첫번째 행과 마지막 행, 첫번째 열과 마지막 열은 항상 인도일 것이라고 가정해도 좋습니다.

oob 체크 불필요!!!!!!!!!!!!!!11 

"""

#입력받기
N, M = map(int, input().split())
r, c, d = map(int, input().split())
arr = [list(map(int, input().split())) for _ in range(N)]

#DIR, answer, visited, rotate_cnt 준비
DIR = (-1, 0), (0, 1), (1, 0), (0, -1)
answer = 1
rotate_cnt = 0
visited =[[0]*M for _ in range(N)]
break_cnt = 0

visited[r][c] = 1
#while
while 1:

    #방향 회전 (rotate_cnt 증가)
    d = (d-1)%4
    rotate_cnt += 1


    #앞칸 이동 가능 확인 => 이동하면 answer+, rotate_cnt = 0
    di, dj = DIR[d]
    nr, nc = r+di, c+dj
    if arr[nr][nc] == 0 and not visited[nr][nc]:
        visited[nr][nc] = 1
        r, c = nr, nc
        rotate_cnt = 0
        answer += 1

    #4번 회전했으면 후진 시도하고 인도면 break. 아니면 후진
    if rotate_cnt == 4:
        nr, nc = r-di, c-dj
        if arr[nr][nc]==1:
            break
        r, c = nr, nc
        rotate_cnt = 0

print(answer)